# -*- coding: utf-8 -*-
"""Car_Price_CatBoostV5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NP5gAo_92wbMlTYVBdGxvSoSx4-540yu

**Import libraries**
"""

import numpy as np
import pandas as pd
import matplotlib.pylab as plt
import seaborn as sns

"""# Data extarction and processing"""

submission_df=pd.read_csv("/content/sample_submission.csv")

submission_df

train_data=pd.read_csv("/content/train.csv")
test_data=pd.read_csv("/content/test.csv")

train_data

test_data

train_data.head()

train_data.columns

# ตรวจสอบ missing value
train_data.isna().sum()

"""# ทำ Feature engineering"""

# แปลงค่าคอลัมน์ running เป็นตัวเลขโดยแยกค่าเลขออกจากหน่วยกิโลเมตร km
train_data['running'] = train_data['running'].apply(lambda x: int(x.split()[0]) if 'km' in x else int(x.split()[0]) * 1.60934)
test_data['running'] = test_data['running'].apply(lambda x: int(x.split()[0]) if 'km' in x else int(x.split()[0]) * 1.60934)

# สร้างตัวแปร run_per_year คำนวณจำนวนการใช้งานรถต่อปี โดยใช้ปีที่ผลิตรถ
train_data['run_per_year'] = train_data['running'] / (2024 - train_data['year'])
train_data['years_used']=2024-train_data['year']

train_data.drop('year',axis=1,inplace=True)

train_data

# สร้างตัวแปร run_per_year กับข้อมูล test
test_data['run_per_year'] = test_data['running'] / (2024 - test_data['year'])
test_data['years_used']=2024-test_data['year']
test_data.drop('year',axis=1,inplace=True)

test_data_p = test_data.iloc[:, 1:]
test_data_p

# ลบ duplicated rows
train_data = train_data.loc[~train_data.duplicated()] \
    .reset_index(drop=True).copy()
train_data

# X: ตัวแปรต้น (feature) หรือข้อมูลที่ใช้ในการพยากรณ์
# y: ตัวแปรเป้าหมาย (target) หรือราคาของรถยนต์ที่เราต้องการพยากรณ์
X=train_data.drop('price',axis=1)
y=train_data['price']

X

test_data_p

X['wheel'].value_counts()

X.drop('wheel',axis=1,inplace=True)
test_data_p.drop('wheel',axis=1,inplace=True)

"""# จัดการ missing values, ทำ scaling , encode categorical columns"""

# แยกข้อมูล numerical, categorical
num=X.select_dtypes(include=['int64','float64']).columns
col=X.select_dtypes(include=['object']).columns

num_t=test_data_p.select_dtypes(include=['int64','float64']).columns
col_t=test_data_p.select_dtypes(include=['object']).columns

from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler

# Step 1: แทนที่ missing values ด้วย mean
num_imputer = SimpleImputer(strategy='mean')
X[num] = num_imputer.fit_transform(X[num])

# Step 2: ทำ scaling กับข้อมูลที่เป็น numerical ใช้ StandardScaler
scaler = StandardScaler()
X[num] = scaler.fit_transform(X[num])

X

from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler

# Step 1: แทนที่ missing values ด้วย mean
num_imputer_t = SimpleImputer(strategy='mean')
test_data_p[num_t] = num_imputer.fit_transform(test_data_p[num_t])

# Step 2: ทำ scaling กับข้อมูลที่เป็น numerical ใช้ StandardScaler
scaler = StandardScaler()
test_data_p[num_t] = scaler.fit_transform(test_data_p[num_t])

test_data_p

from sklearn.impute import SimpleImputer

# แทนที่ missing values ของคอลัมน์ numerical ด้วยค่า mean
numerical_imputer = SimpleImputer(strategy='mean')
X[num] = numerical_imputer.fit_transform(X[num])
test_data_p[num_t] = numerical_imputer.transform(test_data_p[num_t])

# แนที่ missing values ของคอลัมน์ categorical ด้วยคอลัมน์ที่มีหมวดหมู่บ่อยที่สุด
categorical_imputer = SimpleImputer(strategy='most_frequent')
X[col] = categorical_imputer.fit_transform(X[col])
test_data_p[col_t] = categorical_imputer.transform(test_data_p[col_t])

X = pd.get_dummies(X, columns=col)

test_data_p = pd.get_dummies(test_data_p, columns=col_t)

X, test_data_p = X.align(test_data_p, join='left', axis=1)

X

X.isna().sum()

test_data_p

test_data_p.isna().sum()

test_data_p

test_data_p.isna().sum()

X.drop('motor_type_diesel',axis=1,inplace=True)
X.drop('motor_type_hybrid',axis=1,inplace=True)
X.drop('color_golden',axis=1,inplace=True)
X.drop('color_pink',axis=1,inplace=True)
X.drop('color_purple',axis=1,inplace=True)
X.drop('type_minivan / minibus',axis=1,inplace=True)
X.drop('type_pickup',axis=1,inplace=True)

test_data_p.drop('motor_type_diesel',axis=1,inplace=True)
test_data_p.drop('motor_type_hybrid',axis=1,inplace=True)
test_data_p.drop('color_golden',axis=1,inplace=True)
test_data_p.drop('color_pink',axis=1,inplace=True)
test_data_p.drop('color_purple',axis=1,inplace=True)
test_data_p.drop('type_minivan / minibus',axis=1,inplace=True)
test_data_p.drop('type_pickup',axis=1,inplace=True)

"""# ตั้งค่า model และ predict โดยใช้ test data (CatBoostRegressor)"""

!pip install catboost --quiet

from catboost import CatBoostRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import GridSearchCV

# y คือ target
X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.25, random_state=42)

# ตั้งค่า Hyperparameter
param_grid_catboost = {
    'iterations': [ 150, 350, 600],
    'learning_rate': [0.025, 0.05, 0.1],
    'depth': [6, 8, 10, 16],
    'random_state': [42]
}

catboost_model = CatBoostRegressor()

grid_search_catboost = GridSearchCV(catboost_model, param_grid_catboost, cv=5, scoring='neg_mean_squared_error')
grid_search_catboost.fit(X, y)

# Best CatBoost Model
best_catboost_model = grid_search_catboost.best_estimator_

# ทำนายบน test data (test_data_p)
test_predictions_catboost = best_catboost_model.predict(test_data_p)

"""# Create submission file"""

# กำหนดให้คอลัมน์ Id ระบุแต่ละรายการข้อมูล
submission_ids = submission_df['Id']

# ทำนายบน test set (test_data_p)
test_predictions_catboost = best_catboost_model.predict(test_data_p)

# สร้าง DataFrame ที่มี ID และผลลัพธ์ predict
result_catboost = pd.DataFrame({'Id': submission_ids, 'Predicted_Price': test_predictions_catboost})

# รวม result กับ submission_df
submission_df = submission_df.merge(result_catboost, on='Id', how='left')

# แทนที่ price ด้วยค่าที่ predict ได้
submission_df['price'] = submission_df['Predicted_Price']

# ลบ Predicted_Price
submission_df = submission_df.drop(columns=['Predicted_Price'])

print(submission_df)

submission_df

import pandas as pd
# save as csv
submission_df.to_csv('submission_catboost.csv', index=False)